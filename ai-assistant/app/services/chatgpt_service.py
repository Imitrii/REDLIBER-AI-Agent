import logging
import openai
import json
from typing import Dict, Any, List, Optional
import random

from app.core.config import OPENAI_API_KEY

logger = logging.getLogger(__name__)

class ChatGPTService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å ChatGPT API
    """
    
    def __init__(self):
        openai.api_key = OPENAI_API_KEY
        self.conversations = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
    
    async def get_response(self, user_id: str, message: str, context: Optional[Dict[str, Any]] = None) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç.–¥.)
        
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç ChatGPT
        """
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if user_id not in self.conversations:
                self.conversations[user_id] = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            system_message = self._create_system_message(context)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversations[user_id].append({"role": "user", "content": message})
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
            conversation_history = self.conversations[user_id][-10:]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            messages = [system_message] + conversation_history
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å
                messages=messages,
                temperature=0.7,        # –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
                max_tokens=500,         # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞
                top_p=0.95,             # –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
                frequency_penalty=0.5,  # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                presence_penalty=0.5,   # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ç–µ–º
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
            assistant_response = response.choices[0].message.content
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversations[user_id].append({"role": "assistant", "content": assistant_response})
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
            assistant_response = self._add_emoji(assistant_response)
            
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å–æ–º
            assistant_response = self._ensure_question_ending(assistant_response)
            
            logger.info(f"ChatGPT generated response for user {user_id}")
            return assistant_response
            
        except Exception as e:
            logger.error(f"Error getting response from ChatGPT: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ?"
    
    def _create_system_message(self, context: Optional[Dict[str, Any]] = None) -> Dict[str, str]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
        """
        # –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructions = """
        –¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –¥–∏–∞–ª–æ–≥ –æ—Ç –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. 
        –°–ª–µ–¥—É–π —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:
        
        1. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å —Å —ç–º–æ–¥–∑–∏
        2. –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º
        3. –ó–∞–¥–∞–≤–∞–π –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥
        4. –ù–µ –ø–∏—à–∏ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        5. –ü–ª–∞–≤–Ω–æ –ø–æ–¥–≤–æ–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∫ —Ü–µ–ª–∏ (–∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é)
        6. –ù–µ –Ω–∞–≤—è–∑—ã–≤–∞–π—Å—è, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è
        7. –ò—Å–ø–æ–ª—å–∑—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫, –±–µ–∑ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
        8. –ù–µ —É–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ —Ç—ã –±–æ—Ç –∏–ª–∏ –ò–ò
        """
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ/—É—Å–ª—É–≥–µ
        if context and "product_info" in context:
            product_info = context["product_info"]
            instructions += f"\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ/—É—Å–ª—É–≥–µ:\n{product_info}"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–∞–∂, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if context and "sales_script" in context:
            sales_script = context["sales_script"]
            instructions += f"\n\n–°–ª–µ–¥—É–π —ç—Ç–æ–º—É —Å–∫—Ä–∏–ø—Ç—É –ø—Ä–æ–¥–∞–∂:\n{sales_script}"
        
        return {"role": "system", "content": instructions}
    
    def _add_emoji(self, message: str) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        emojis = ["üòä", "üëç", "üôå", "‚ú®", "üî•", "üíØ", "üëè", "ü§©", "üòâ", "üéØ"]
        # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 70% –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
        if random.random() < 0.7:
            # –î–æ–±–∞–≤–ª—è–µ–º 1-2 —ç–º–æ–¥–∑–∏
            emoji_count = random.randint(1, 2)
            selected_emojis = random.sample(emojis, emoji_count)
            message = message.rstrip() + " " + "".join(selected_emojis)
        
        return message
    
    def _ensure_question_ending(self, message: str) -> str:
        """
        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å–æ–º
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤–æ–ø—Ä–æ—Å–æ–º
        if message.rstrip().endswith("?"):
            return message
        
        # –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        questions = [
            "–ß—Ç–æ —Å–∫–∞–∂–µ—Ç–µ?",
            "–ö–∞–∫ –≤–∞–º —ç—Ç–æ?",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ?",
            "–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ?",
            "–°–æ–≥–ª–∞—Å–Ω—ã?",
            "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?"
        ]
        
        return message.rstrip() + " " + random.choice(questions)
